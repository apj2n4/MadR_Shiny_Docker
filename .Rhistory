knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(purrr)
#library(tictoc)
library(lubridate)
#A simple function to convert string dates to dates to numeric
convert_date = function(x){
x = paste(x,'-1')
x = myd(x)
x = as.numeric(x)
return(x)
}
df <- read_csv('loan.csv')
df %>% glimpse()
df_NA <- df %>%
select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.)))) %>%
select_if(function(x) any(x>400000))
df_NA %>% glimpse()
df_new <- df %>%
select(-c(colnames(df_NA)))
df_new <- df_new %>%
select(-c(funded_amnt_inv,
id,
member_id,
url,
zip_code,
emp_title,
title,
addr_state,
policy_code,
pymnt_plan,
acc_now_delinq,
collections_12_mths_ex_med,
collection_recovery_fee,
delinq_2yrs,
recoveries,
out_prncp_inv,
total_pymnt_inv,
total_rec_prncp,
pub_rec,
application_type,
total_rec_late_fee,
last_pymnt_d,
next_pymnt_d,
earliest_cr_line,
funded_amnt,
sub_grade))
df_new %>% glimpse()
df_new <- df_new %>%
mutate(loan_status = ifelse((loan_status !='Fully Paid' & loan_status !='Issued' & loan_status != 'Current'),'Default','Good'))
df_new <- df_new %>%
mutate(last_credit_pull_d = convert_date(last_credit_pull_d),
issue_d = convert_date(issue_d),
score_days_interval = last_credit_pull_d - issue_d)
df_new %>% glimpse()
df_new %>% select(home_ownership) %>% unique()
df_new <- df_new %>%
filter(home_ownership!='NONE' &
home_ownership!='ANY' &
home_ownership!='OTHER')
df_new <- df_new %>%
mutate(loan_status = as.factor(loan_status),
term = as.factor(term),
grade = as.factor(grade),
emp_length = as.factor(emp_length),
home_ownership = as.factor(home_ownership),
verification_status = as.factor(verification_status),
purpose = as.factor(purpose)) %>%
drop_na()
df_new %>% glimpse()
df_new <- df_new %>%
select(-c(issue_d,
last_credit_pull_d))
loan_cleaned <- saveRDS(df_new,file = "loan_cleaned_RMD.rds")
ggplot(df_new,aes(y=int_rate,fill=loan_status)) +
geom_boxplot() +
labs(y="Interest Rate %")
ggplot(df_new,aes(y=score_days_interval,fill=loan_status))+
geom_boxplot() +
labs(title="Number of Days elasped between loan issuance and first credit pull")
ggplot(df_new,aes(y=loan_amnt,fill=loan_status))+
geom_boxplot() +
labs(y='Loan Amount ($)')
ggplot(df_new,aes(y=installment,fill=loan_status))+
geom_boxplot()+
labs(y='Installment Amount ($)')
ggplot(df_new,aes(x = loan_status,fill=loan_status)) +
geom_bar() +
labs(title = 'Class Imbalance in the Response Variable')
set.seed(123)
df_new <- readRDS(file = 'loan_cleaned_RMD.rds')
df_sample <- df_new %>%
sample_n(size = 20000)
df_sample <- df_sample %>%
mutate(id=row_number())
df_sample_train = df_sample %>%
sample_frac(0.7)
df_sample_test = anti_join(df_sample,df_sample_train,by='id')
# Remove row ids
df_sample_train <- df_sample_train %>%
select(-c(id))
df_sample_test <- df_sample_test %>%
select(-c(id))
logistic1 <- glm(data = df_sample_train,formula = loan_status~.,family = 'binomial' )
summary(logistic1)
logistic1.prob = predict(logistic1,newdata = df_sample_test,type = 'response')
df_sample_test <- df_sample_test %>%
mutate(prob1 = logistic1.prob) %>%
mutate(loan_status_predicted = ifelse(prob1 < 0.5,"Default","Good")) %>%
mutate(loan_status_predicted = as.factor(loan_status_predicted))
df_sample_test %>% summarize(mean(loan_status==loan_status_predicted))
shiny::runApp('loan_default_app')
